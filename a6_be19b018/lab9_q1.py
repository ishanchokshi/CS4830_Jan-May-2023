# -*- coding: utf-8 -*-
"""Lab9_Q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yt7mlfD4Uxw9xfJlc5cYKhKVf4tLYDHT
"""

from pyspark.context import SparkContext
from pyspark.sql.session import SparkSession
from pyspark.ml.feature import StringIndexer, VectorAssembler, StandardScaler, Normalizer
from pyspark.ml.classification import LogisticRegression, RandomForestClassifier, DecisionTreeClassifier
from pyspark.ml import Pipeline
from pyspark.ml.evaluation import MulticlassClassificationEvaluator

sc = SparkContext()
spark = SparkSession(sc)

file_location ="gs://dataproc-staging-us-central1-820790181286-dl4jzwmr/diabetes.csv"
df = spark.read.format("csv").option("header",
True).load(file_location).toDF("Pregnancies", "Glucose", "BloodPressure",
"SkinThickness", "Insulin", "BMI","DiabetesPedigreeFunction","Age","Outcome")

df = df.withColumn("Pregnancies",
df["Pregnancies"].cast("integer")).withColumn("Glucose",
df["Glucose"].cast("float")).withColumn("BloodPressure",
df["BloodPressure"].cast("integer")).withColumn("SkinThickness",
df["SkinThickness"].cast("float")).withColumn('Insulin',df['Insulin'].cast('integer')).withColumn('BMI',df['BMI'].cast('float')).withColumn('DiabetesPedigreeFunction',
df['DiabetesPedigreeFunction'].cast('integer')).withColumn('Age',
df['Age'].cast('integer'))

df.show()

input_df = df.drop('Outcome').columns

assembler = VectorAssembler(inputCols=input_df, outputCol = 'features')
labelIndexer = StringIndexer(inputCol="Outcome", outputCol="indexedLabel").fit(df)

scaler_ss = StandardScaler(inputCol="features", outputCol="scaledFeatures", withStd=False, withMean=True)
scaler = Normalizer(inputCol="features", outputCol="scaledFeatures")

rf = RandomForestClassifier(labelCol="indexedLabel", featuresCol="scaledFeatures", numTrees=10)
lr = LogisticRegression(labelCol="indexedLabel", featuresCol="scaledFeatures")
dtc = DecisionTreeClassifier(labelCol="indexedLabel", featuresCol="scaledFeatures")

"""## Using Normalizer"""

pipeline_lr = Pipeline(stages=[labelIndexer, assembler,scaler,lr])



(trainingData, testData) = df.randomSplit([0.8, 0.2])
model = pipeline_lr.fit(trainingData)

predictions = model.transform(testData)
evaluator = MulticlassClassificationEvaluator(labelCol="indexedLabel", predictionCol="prediction", metricName="accuracy")
accuracy = evaluator.evaluate(predictions)
print("Test set accuracy for logistic regression  = %g" % (accuracy))

pipeline_rf = Pipeline(stages=[labelIndexer, assembler,scaler, rf])
pipeline_dtc = Pipeline(stages=[labelIndexer, assembler,scaler, dtc])

model_rf = pipeline_rf.fit(trainingData)
model_dtc = pipeline_dtc.fit(trainingData)

predictions = model_rf.transform(testData)
evaluator = MulticlassClassificationEvaluator(labelCol="indexedLabel", predictionCol="prediction", metricName="accuracy")
accuracy = evaluator.evaluate(predictions)
print("Test set accuracy for Random Forest Classifier  = %g" % (accuracy))

predictions = model_dtc.transform(testData)
evaluator = MulticlassClassificationEvaluator(labelCol="indexedLabel", predictionCol="prediction", metricName="accuracy")
accuracy = evaluator.evaluate(predictions)
print("Test set accuracy for Decision Tree Classifier  = %g" % (accuracy))

"""## Using Standard Scaler"""

pipeline_lr = Pipeline(stages=[labelIndexer, assembler,scaler_ss,lr])
(trainingData, testData) = df.randomSplit([0.8, 0.2])
model = pipeline_lr.fit(trainingData)

predictions = model.transform(testData)
evaluator = MulticlassClassificationEvaluator(labelCol="indexedLabel", predictionCol="prediction", metricName="accuracy")
accuracy = evaluator.evaluate(predictions)
print("Test set accuracy for logistic regression  = %g" % (accuracy))

pipeline_rf = Pipeline(stages=[labelIndexer, assembler,scaler_ss, rf])
pipeline_dtc = Pipeline(stages=[labelIndexer, assembler,scaler_ss, dtc])

model_rf = pipeline_rf.fit(trainingData)
model_dtc = pipeline_dtc.fit(trainingData)

predictions = model_rf.transform(testData)
evaluator = MulticlassClassificationEvaluator(labelCol="indexedLabel", predictionCol="prediction", metricName="accuracy")
accuracy = evaluator.evaluate(predictions)
print("Test set accuracy for Random Forest Classifier  = %g" % (accuracy))

predictions = model_dtc.transform(testData)
evaluator = MulticlassClassificationEvaluator(labelCol="indexedLabel", predictionCol="prediction", metricName="accuracy")
accuracy = evaluator.evaluate(predictions)
print("Test set accuracy for Decision Tree Classifier  = %g" % (accuracy))

